Grammar

    0 $accept: program $end

    1 program: s_expr EOL

    2 s_expr: SYMBOL
    3       | LPAREN let_section s_expr RPAREN
    4       | number
    5       | f_expr
    6       | QUIT
    7       | error

    8 number: INT
    9       | DOUBLE

   10 f_expr: LPAREN FUNC s_expr RPAREN
   11       | LPAREN FUNC s_expr s_expr RPAREN

   12 let_section: LPAREN let_list RPAREN

   13 let_list: LET let_elem
   14         | let_list let_elem

   15 let_elem: LPAREN SYMBOL s_expr RPAREN


Terminals, with rules where they appear

$end (0) 0
error (256) 7
FUNC (258) 10 11
SYMBOL (259) 2 15
INT (260) 8
DOUBLE (261) 9
LPAREN (262) 3 10 11 12 15
RPAREN (263) 3 10 11 12 15
EOL (264) 1
QUIT (265) 6
LET (266) 13


Nonterminals, with rules where they appear

$accept (12)
    on left: 0
program (13)
    on left: 1, on right: 0
s_expr (14)
    on left: 2 3 4 5 6 7, on right: 1 3 10 11 15
number (15)
    on left: 8 9, on right: 4
f_expr (16)
    on left: 10 11, on right: 5
let_section (17)
    on left: 12, on right: 3
let_list (18)
    on left: 13 14, on right: 12 14
let_elem (19)
    on left: 15, on right: 13 14


State 0

    0 $accept: . program $end

    error   shift, and go to state 1
    SYMBOL  shift, and go to state 2
    INT     shift, and go to state 3
    DOUBLE  shift, and go to state 4
    LPAREN  shift, and go to state 5
    QUIT    shift, and go to state 6

    program  go to state 7
    s_expr   go to state 8
    number   go to state 9
    f_expr   go to state 10


State 1

    7 s_expr: error .

    $default  reduce using rule 7 (s_expr)


State 2

    2 s_expr: SYMBOL .

    $default  reduce using rule 2 (s_expr)


State 3

    8 number: INT .

    $default  reduce using rule 8 (number)


State 4

    9 number: DOUBLE .

    $default  reduce using rule 9 (number)


State 5

    3 s_expr: LPAREN . let_section s_expr RPAREN
   10 f_expr: LPAREN . FUNC s_expr RPAREN
   11       | LPAREN . FUNC s_expr s_expr RPAREN

    FUNC    shift, and go to state 11
    LPAREN  shift, and go to state 12

    let_section  go to state 13


State 6

    6 s_expr: QUIT .

    $default  reduce using rule 6 (s_expr)


State 7

    0 $accept: program . $end

    $end  shift, and go to state 14


State 8

    1 program: s_expr . EOL

    EOL  shift, and go to state 15


State 9

    4 s_expr: number .

    $default  reduce using rule 4 (s_expr)


State 10

    5 s_expr: f_expr .

    $default  reduce using rule 5 (s_expr)


State 11

   10 f_expr: LPAREN FUNC . s_expr RPAREN
   11       | LPAREN FUNC . s_expr s_expr RPAREN

    error   shift, and go to state 1
    SYMBOL  shift, and go to state 2
    INT     shift, and go to state 3
    DOUBLE  shift, and go to state 4
    LPAREN  shift, and go to state 5
    QUIT    shift, and go to state 6

    s_expr  go to state 16
    number  go to state 9
    f_expr  go to state 10


State 12

   12 let_section: LPAREN . let_list RPAREN

    LET  shift, and go to state 17

    let_list  go to state 18


State 13

    3 s_expr: LPAREN let_section . s_expr RPAREN

    error   shift, and go to state 1
    SYMBOL  shift, and go to state 2
    INT     shift, and go to state 3
    DOUBLE  shift, and go to state 4
    LPAREN  shift, and go to state 5
    QUIT    shift, and go to state 6

    s_expr  go to state 19
    number  go to state 9
    f_expr  go to state 10


State 14

    0 $accept: program $end .

    $default  accept


State 15

    1 program: s_expr EOL .

    $default  reduce using rule 1 (program)


State 16

   10 f_expr: LPAREN FUNC s_expr . RPAREN
   11       | LPAREN FUNC s_expr . s_expr RPAREN

    error   shift, and go to state 1
    SYMBOL  shift, and go to state 2
    INT     shift, and go to state 3
    DOUBLE  shift, and go to state 4
    LPAREN  shift, and go to state 5
    RPAREN  shift, and go to state 20
    QUIT    shift, and go to state 6

    s_expr  go to state 21
    number  go to state 9
    f_expr  go to state 10


State 17

   13 let_list: LET . let_elem

    LPAREN  shift, and go to state 22

    let_elem  go to state 23


State 18

   12 let_section: LPAREN let_list . RPAREN
   14 let_list: let_list . let_elem

    LPAREN  shift, and go to state 22
    RPAREN  shift, and go to state 24

    let_elem  go to state 25


State 19

    3 s_expr: LPAREN let_section s_expr . RPAREN

    RPAREN  shift, and go to state 26


State 20

   10 f_expr: LPAREN FUNC s_expr RPAREN .

    $default  reduce using rule 10 (f_expr)


State 21

   11 f_expr: LPAREN FUNC s_expr s_expr . RPAREN

    RPAREN  shift, and go to state 27


State 22

   15 let_elem: LPAREN . SYMBOL s_expr RPAREN

    SYMBOL  shift, and go to state 28


State 23

   13 let_list: LET let_elem .

    $default  reduce using rule 13 (let_list)


State 24

   12 let_section: LPAREN let_list RPAREN .

    $default  reduce using rule 12 (let_section)


State 25

   14 let_list: let_list let_elem .

    $default  reduce using rule 14 (let_list)


State 26

    3 s_expr: LPAREN let_section s_expr RPAREN .

    $default  reduce using rule 3 (s_expr)


State 27

   11 f_expr: LPAREN FUNC s_expr s_expr RPAREN .

    $default  reduce using rule 11 (f_expr)


State 28

   15 let_elem: LPAREN SYMBOL . s_expr RPAREN

    error   shift, and go to state 1
    SYMBOL  shift, and go to state 2
    INT     shift, and go to state 3
    DOUBLE  shift, and go to state 4
    LPAREN  shift, and go to state 5
    QUIT    shift, and go to state 6

    s_expr  go to state 29
    number  go to state 9
    f_expr  go to state 10


State 29

   15 let_elem: LPAREN SYMBOL s_expr . RPAREN

    RPAREN  shift, and go to state 30


State 30

   15 let_elem: LPAREN SYMBOL s_expr RPAREN .

    $default  reduce using rule 15 (let_elem)
