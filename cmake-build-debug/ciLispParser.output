Grammar

    0 $accept: program $end

    1 program: s_expr EOL

    2 s_expr: SYMBOL
    3       | LPAREN let_section s_expr RPAREN
    4       | number
    5       | f_expr
    6       | QUIT
    7       | error

    8 number: INT
    9       | DOUBLE
   10       | type INT
   11       | type DOUBLE

   12 f_expr: LPAREN FUNC s_expr_list RPAREN

   13 s_expr_list: s_expr s_expr_list
   14            | s_expr

   15 let_section: LPAREN let_list RPAREN

   16 let_list: LET let_elem
   17         | let_list let_elem

   18 let_elem: LPAREN type SYMBOL s_expr RPAREN
   19         | LPAREN SYMBOL s_expr RPAREN

   20 type: TYPE_INT
   21     | TYPE_DOUBLE


Terminals, with rules where they appear

$end (0) 0
error (256) 7
FUNC (258) 12
SYMBOL (259) 2 18 19
INT (260) 8 10
DOUBLE (261) 9 11
LPAREN (262) 3 12 15 18 19
RPAREN (263) 3 12 15 18 19
EOL (264) 1
QUIT (265) 6
LET (266) 16
TYPE_INT (267) 20
TYPE_DOUBLE (268) 21


Nonterminals, with rules where they appear

$accept (14)
    on left: 0
program (15)
    on left: 1, on right: 0
s_expr (16)
    on left: 2 3 4 5 6 7, on right: 1 3 13 14 18 19
number (17)
    on left: 8 9 10 11, on right: 4
f_expr (18)
    on left: 12, on right: 5
s_expr_list (19)
    on left: 13 14, on right: 12 13
let_section (20)
    on left: 15, on right: 3
let_list (21)
    on left: 16 17, on right: 15 17
let_elem (22)
    on left: 18 19, on right: 16 17
type (23)
    on left: 20 21, on right: 10 11 18


State 0

    0 $accept: . program $end

    error        shift, and go to state 1
    SYMBOL       shift, and go to state 2
    INT          shift, and go to state 3
    DOUBLE       shift, and go to state 4
    LPAREN       shift, and go to state 5
    QUIT         shift, and go to state 6
    TYPE_INT     shift, and go to state 7
    TYPE_DOUBLE  shift, and go to state 8

    program  go to state 9
    s_expr   go to state 10
    number   go to state 11
    f_expr   go to state 12
    type     go to state 13


State 1

    7 s_expr: error .

    $default  reduce using rule 7 (s_expr)


State 2

    2 s_expr: SYMBOL .

    $default  reduce using rule 2 (s_expr)


State 3

    8 number: INT .

    $default  reduce using rule 8 (number)


State 4

    9 number: DOUBLE .

    $default  reduce using rule 9 (number)


State 5

    3 s_expr: LPAREN . let_section s_expr RPAREN
   12 f_expr: LPAREN . FUNC s_expr_list RPAREN

    FUNC    shift, and go to state 14
    LPAREN  shift, and go to state 15

    let_section  go to state 16


State 6

    6 s_expr: QUIT .

    $default  reduce using rule 6 (s_expr)


State 7

   20 type: TYPE_INT .

    $default  reduce using rule 20 (type)


State 8

   21 type: TYPE_DOUBLE .

    $default  reduce using rule 21 (type)


State 9

    0 $accept: program . $end

    $end  shift, and go to state 17


State 10

    1 program: s_expr . EOL

    EOL  shift, and go to state 18


State 11

    4 s_expr: number .

    $default  reduce using rule 4 (s_expr)


State 12

    5 s_expr: f_expr .

    $default  reduce using rule 5 (s_expr)


State 13

   10 number: type . INT
   11       | type . DOUBLE

    INT     shift, and go to state 19
    DOUBLE  shift, and go to state 20


State 14

   12 f_expr: LPAREN FUNC . s_expr_list RPAREN

    error        shift, and go to state 1
    SYMBOL       shift, and go to state 2
    INT          shift, and go to state 3
    DOUBLE       shift, and go to state 4
    LPAREN       shift, and go to state 5
    QUIT         shift, and go to state 6
    TYPE_INT     shift, and go to state 7
    TYPE_DOUBLE  shift, and go to state 8

    s_expr       go to state 21
    number       go to state 11
    f_expr       go to state 12
    s_expr_list  go to state 22
    type         go to state 13


State 15

   15 let_section: LPAREN . let_list RPAREN

    LET  shift, and go to state 23

    let_list  go to state 24


State 16

    3 s_expr: LPAREN let_section . s_expr RPAREN

    error        shift, and go to state 1
    SYMBOL       shift, and go to state 2
    INT          shift, and go to state 3
    DOUBLE       shift, and go to state 4
    LPAREN       shift, and go to state 5
    QUIT         shift, and go to state 6
    TYPE_INT     shift, and go to state 7
    TYPE_DOUBLE  shift, and go to state 8

    s_expr  go to state 25
    number  go to state 11
    f_expr  go to state 12
    type    go to state 13


State 17

    0 $accept: program $end .

    $default  accept


State 18

    1 program: s_expr EOL .

    $default  reduce using rule 1 (program)


State 19

   10 number: type INT .

    $default  reduce using rule 10 (number)


State 20

   11 number: type DOUBLE .

    $default  reduce using rule 11 (number)


State 21

   13 s_expr_list: s_expr . s_expr_list
   14            | s_expr .

    error        shift, and go to state 1
    SYMBOL       shift, and go to state 2
    INT          shift, and go to state 3
    DOUBLE       shift, and go to state 4
    LPAREN       shift, and go to state 5
    QUIT         shift, and go to state 6
    TYPE_INT     shift, and go to state 7
    TYPE_DOUBLE  shift, and go to state 8

    RPAREN  reduce using rule 14 (s_expr_list)

    s_expr       go to state 21
    number       go to state 11
    f_expr       go to state 12
    s_expr_list  go to state 26
    type         go to state 13


State 22

   12 f_expr: LPAREN FUNC s_expr_list . RPAREN

    RPAREN  shift, and go to state 27


State 23

   16 let_list: LET . let_elem

    LPAREN  shift, and go to state 28

    let_elem  go to state 29


State 24

   15 let_section: LPAREN let_list . RPAREN
   17 let_list: let_list . let_elem

    LPAREN  shift, and go to state 28
    RPAREN  shift, and go to state 30

    let_elem  go to state 31


State 25

    3 s_expr: LPAREN let_section s_expr . RPAREN

    RPAREN  shift, and go to state 32


State 26

   13 s_expr_list: s_expr s_expr_list .

    $default  reduce using rule 13 (s_expr_list)


State 27

   12 f_expr: LPAREN FUNC s_expr_list RPAREN .

    $default  reduce using rule 12 (f_expr)


State 28

   18 let_elem: LPAREN . type SYMBOL s_expr RPAREN
   19         | LPAREN . SYMBOL s_expr RPAREN

    SYMBOL       shift, and go to state 33
    TYPE_INT     shift, and go to state 7
    TYPE_DOUBLE  shift, and go to state 8

    type  go to state 34


State 29

   16 let_list: LET let_elem .

    $default  reduce using rule 16 (let_list)


State 30

   15 let_section: LPAREN let_list RPAREN .

    $default  reduce using rule 15 (let_section)


State 31

   17 let_list: let_list let_elem .

    $default  reduce using rule 17 (let_list)


State 32

    3 s_expr: LPAREN let_section s_expr RPAREN .

    $default  reduce using rule 3 (s_expr)


State 33

   19 let_elem: LPAREN SYMBOL . s_expr RPAREN

    error        shift, and go to state 1
    SYMBOL       shift, and go to state 2
    INT          shift, and go to state 3
    DOUBLE       shift, and go to state 4
    LPAREN       shift, and go to state 5
    QUIT         shift, and go to state 6
    TYPE_INT     shift, and go to state 7
    TYPE_DOUBLE  shift, and go to state 8

    s_expr  go to state 35
    number  go to state 11
    f_expr  go to state 12
    type    go to state 13


State 34

   18 let_elem: LPAREN type . SYMBOL s_expr RPAREN

    SYMBOL  shift, and go to state 36


State 35

   19 let_elem: LPAREN SYMBOL s_expr . RPAREN

    RPAREN  shift, and go to state 37


State 36

   18 let_elem: LPAREN type SYMBOL . s_expr RPAREN

    error        shift, and go to state 1
    SYMBOL       shift, and go to state 2
    INT          shift, and go to state 3
    DOUBLE       shift, and go to state 4
    LPAREN       shift, and go to state 5
    QUIT         shift, and go to state 6
    TYPE_INT     shift, and go to state 7
    TYPE_DOUBLE  shift, and go to state 8

    s_expr  go to state 38
    number  go to state 11
    f_expr  go to state 12
    type    go to state 13


State 37

   19 let_elem: LPAREN SYMBOL s_expr RPAREN .

    $default  reduce using rule 19 (let_elem)


State 38

   18 let_elem: LPAREN type SYMBOL s_expr . RPAREN

    RPAREN  shift, and go to state 39


State 39

   18 let_elem: LPAREN type SYMBOL s_expr RPAREN .

    $default  reduce using rule 18 (let_elem)
